#!/usr/bin/perl
use strict;
use warnings;
use Term::ReadKey;
use IO::Socket::INET;
use Getopt::Std;
use Crypt::CBC;
use threads;


$| = 1;

# version number, author info, whatever ...
our $VERSION = "0.1";

# vars for hostname and nickname
our($opt_h, $opt_n);


# get options, -h for hostname -n for nickname
getopt('hn');

# usage info
sub usage {
    print <<"EOUSAGE";
    secc $VERSION

     Usage:
        
            secc -h [HOSTNAME] -n [NICKNAME]

            where hostname is either an IP address or a hostname and
            nickname is a ... well ... nickname .. what else?!

EOUSAGE
}

# tell the user to rtfm if he doesn't get it
usage() and exit unless (defined $opt_h and defined $opt_n);

# name var is $opt_n now .. just for clarity
my $name = $opt_n;

# create the socket
my $host = $opt_h;
my $port = 31337;

my $sock = IO::Socket::INET->new(
    PeerAddr => $host,
    PeerPort => $port,
    Proto    => 'tcp',
);

# error checking as usual
defined $sock or die "ERROR: Can't connect to port $port on $host: $!\n";

$sock->recv(my $recv_data,1024);    # nickname:
$sock->send("$name\n");
$sock->flush();

my $cipher = Crypt::CBC->new({   'key'    => 'my secret key',
                                'cipher' => 'Blowfish',
                                'header' => 'salt',
                                'padding' => 'standard',
                                'regenerate_key' => 1,
                                'prepend_iv' => 0}
);

my $lsnr = threads->new(\&get_messages)->detach();

sub get_messages {
    while (1) {
        my $recv_data = $sock->getline();
        
        # THIS .. my dear friend is neccessary ... because otherwise
        # the encryption creates newlines sporadically. And THEN, we
        # read the wrong input lines.
        $recv_data =~ s/SECC_NEWLINE_REPLACE/\n/g;

        my $plain = $cipher->decrypt_hex($recv_data);
        print $plain;
    }
}


while (1) {
    my $send_data = <STDIN>;
    my $msg = $cipher->encrypt_hex("$name: $send_data");
    
    # THIS .. my dear friend is neccessary ... because otherwise
    # the encryption creates newlines sporadically. And THEN, we
    # read the wrong input lines.
    $msg =~ s/\n/RALFALF/g;
    
    # say() creates a newline at the end, so we don't need to append it.
    $sock->say($msg);
}
