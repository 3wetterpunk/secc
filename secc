#!/usr/bin/perl
use strict;
use warnings;
use Term::ReadKey;
use IO::Socket::INET;
use Getopt::Std;
use Crypt::CBC;
use threads;

# version number, author info, whatever ...
our $VERSION = "0.1";

# vars for hostname and nickname
our($opt_h, $opt_n);


# get options, -h for hostname -n for nickname
getopt('hn');

# usage info
sub usage {
    print <<"EOUSAGE";
    secc $VERSION

     Usage:
        
            secc -h [HOSTNAME] -n [NICKNAME]

            where hostname is either an IP address or a hostname and
            nickname is a ... well ... nickname .. what else?!

EOUSAGE
}

# tell the user to rtfm if he doesn't get it
usage() and exit unless (defined $opt_h and defined $opt_n);

# name var is $opt_n now .. just for clarity
my $name = $opt_n;

# create the socket
my $host = $opt_h;
my $port = 31337;

my $sock = IO::Socket::INET->new(
    PeerAddr => $host,
    PeerPort => $port,
    Proto    => 'tcp',
);

# error checking as usual
defined $sock or die "ERROR: Can't connect to port $port on $host: $!\n";

$sock->recv(my $recv_data,1024);    # nickname:
$sock->send("$name\n");
$sock->recv($recv_data,1024);    # login message


my $cipher = Crypt::CBC->new({   'key'    => 'my secret key',
                                'cipher' => 'Blowfish',
                                'header' => 'salt',
                                'padding' => 'standard',
                                'regenerate_key' => 1,
                                'prepend_iv' => 0}
);

my $lsnr = threads->new(\&get_messages)->detach();

sub get_messages {
    while (1) {
        $sock->recv(my $recv_data,1024);
        chomp($recv_data);
        my $plain = $cipher->decrypt($recv_data);
        print $plain, "\n";
    }
}


while (1) {
    my $send_data = <STDIN>;
    chomp($send_data);
    my $msg = $cipher->encrypt("$name: $send_data");
    $sock->send("$msg\n");
}
